# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-03-04T19:54:58+00:00

from __future__ import annotations

from typing import List, Optional, Union
from starlette.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Header, Path, Query, UploadFile
import uvicorn
import pathlib
from models import ApiResponse, Order, Pet, Status3, StoreInventoryGetResponse, User

app = FastAPI(
    title='Swagger Petstore - OpenAPI 3.0',
    description="Forked and modified by International Network Support & Service - Glas.\nModification are -> \n - removed xml and x-www-form-urlencoded (leaving only application/json). \n - Adding examples to paramters. \n - Validated with openapi-style-validator-cli. \nThis is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n- [OpenAPI samples from inss.ch](https://gitlab.com/networkinss/sampleopenapicollection)",
    termsOfService='http://inss.ch',
    contact={'email': 'openapi@inss.ch'},
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    version='1.1.0',
    servers=[{'url': '/api/v3'}],
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"appstatus": "up"}

@app.put('/pet', response_model=Pet, tags=['pet'])
def update_pet(body: Pet) -> Pet:
    """
    Update an existing pet
    """
    pass


@app.post('/pet', response_model=Pet, tags=['pet'])
def add_pet(body: Pet) -> Pet:
    """
    Add a new pet to the store
    """
    pass


@app.get('/pet/findbystatus', response_model=List[Pet], tags=['pet'])
def find_pets_by_status(status: Optional[Status3] = 'available') -> List[Pet]:
    """
    Finds Pets by status
    """
    pass


@app.get('/pet/findbytags', response_model=List[Pet], tags=['pet'])
def find_pets_by_tags(tags: Optional[List[str]] = None) -> List[Pet]:
    """
    Finds Pets by tags
    """
    pass


@app.get('/pet/{pet_id}', response_model=Pet, tags=['pet'])
def get_pet_by_id(pet_id: int = Path(..., alias='petId')) -> Pet:
    """
    Find pet by ID
    """
    pass


@app.post('/pet/{pet_id}', response_model=None, tags=['pet'])
def update_pet_with_form(
    pet_id: int = Path(..., alias='petId'),
    name: Optional[str] = None,
    status: Optional[str] = None,
) -> None:
    """
    Updates a pet in the store with form data
    """
    pass


@app.delete('/pet/{pet_id}', response_model=None, tags=['pet'])
def delete_pet(
    a_p_i__k_e_y: Optional[str] = Header(None, alias='API_KEY'),
    pet_id: int = Path(..., alias='petId'),
) -> None:
    """
    Deletes a pet
    """
    pass


@app.post('/pet/{pet_id}/uploadimage', response_model=ApiResponse, tags=['pet'])
def upload_file(
    file: UploadFile,
    pet_id: int = Path(..., alias='petId'),
    additional_metadata: Optional[str] = Query(None, alias='additionalMetadata'),

) -> ApiResponse:
    """
    uploads an image
    """
    pass


@app.get('/store/inventory', response_model=StoreInventoryGetResponse, tags=['store'])
def get_inventory() -> StoreInventoryGetResponse:
    """
    Returns pet inventories by status
    """
    pass


@app.post('/store/order', response_model=Order, tags=['store'])
def place_order(body: Order = None) -> Order:
    """
    Place an order for a pet
    """
    pass


@app.get('/store/order/{order_id}', response_model=Order, tags=['store'])
def get_order_by_id(order_id: int = Path(..., alias='orderId')) -> Order:
    """
    Find purchase order by ID
    """
    pass


@app.delete('/store/order/{order_id}', response_model=None, tags=['store'])
def delete_order(order_id: int = Path(..., alias='orderId')) -> None:
    """
    Delete purchase order by ID
    """
    pass


@app.post(
    '/user', response_model=None, responses={'default': {'model': User}}, tags=['user']
)
def create_user(body: User = None) -> Union[None, User]:
    """
    Create user
    """
    pass


@app.post('/user/createwithlist', response_model=User, tags=['user'])
def create_users_with_list_input(body: List[User] = None) -> User:
    """
    Creates list of users with given input array
    """
    pass


@app.get('/user/login', response_model=str, tags=['user'])
def login_user(username: Optional[str] = None, password: Optional[str] = None) -> str:
    """
    Logs user into the system
    """
    pass


@app.get('/user/logout', response_model=None, tags=['user'])
def logout_user() -> None:
    """
    Logs out current logged in user session
    """
    pass


@app.get('/user/{username}', response_model=User, tags=['user'])
def get_user_by_name(username: str) -> User:
    """
    Get user by user name
    """
    pass


@app.put('/user/{username}', response_model=None, tags=['user'])
def update_user(username: str, body: User = None) -> None:
    """
    Update user
    """
    pass


@app.delete('/user/{username}', response_model=None, tags=['user'])
def delete_user(username: str) -> None:
    """
    Delete user
    """
    pass

if __name__ == "__main__":
    cwd = pathlib.Path(__file__).parent.resolve()
    print("cwd: " + str(cwd))
    print("Server starting...")
    uvicorn.run(app, host="127.0.0.1", port=8000, log_config=f"{cwd}/log.ini")

